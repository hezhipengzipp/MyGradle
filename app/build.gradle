/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'maven-publish'
    id 'myproject.java-conventions'
}
apply from: "../publish.gradle"
apply plugin: MyPlugin
apply from: rootProject.file('buildSrc/share.gradle')
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}
publishing {
    publications {
        create("maven", MavenPublication) {
            groupId = "com.gradle.tutorial"
            artifactId = "tutorial"
            version = "1.0"

            from(components["java"])
        }
    }
}

class UserInfo {
    String name
    String email
}

tasks.register('greet') {
    group = "clife.zippsun.com"
    description = "this is a smart utils"
    def user = configure(new UserInfo()) {
        name = "Isaac Newton"
        email = "isaac@newton.me"
    }
    doLast {
        println user.name
        println user.email
    }
    dependsOn(tasks.assemble)
}

abstract class HelloTask extends DefaultTask {

    @TaskAction
    def greet() {
        println "Hello $name"
    }
}

tasks.register('haha', HelloTask) {
    group = "Custom tasks"
    description = "A lovely greeting task"
}

abstract class FileTask extends DefaultTask {

    @Input
    abstract fileText = project.objects.property(String)

    @Input
    String fileName = "myfile.txt"

    @OutputFile
    File outputFile = project.file(fileName)

    @TaskAction
    def action() {
        try {
            outputFile.createNewFile()
            outputFile.write(fileText.get())
        } catch (IOException e) {
            println "Error creating or writing to file: ${e.message}"
        }
    }
}

tasks.register("fileTask", FileTask) {
    fileText.set("hello from configurable property")
    description = "this is a file task"
    group = "clife.file.com"
}